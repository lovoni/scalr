# PySNMP SMI module. Autogenerated from smidump -f python UCD-SNMP-MIB
# by libsmi2pysnmp-0.0.7-alpha at Wed Jun  9 13:26:30 2010,
# Python version (2, 6, 5, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Opaque", "TimeTicks", "enterprises")
( DisplayString, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")

# Types

class Float(Opaque):
    subtypeSpec = Opaque.subtypeSpec+constraint.ValueSizeConstraint(7,7)
    fixedLength = 7
    pass

class UCDErrorFix(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(0,1,)
    namedValues = namedval.NamedValues(("noError", 0), ("runFix", 1), )
    pass

class UCDErrorFlag(Integer):
    subtypeSpec = Integer.subtypeSpec+constraint.SingleValueConstraint(0,1,)
    namedValues = namedval.NamedValues(("noError", 0), ("error", 1), )
    pass


# Objects

ucdavis = ModuleIdentity((1, 3, 6, 1, 4, 1, 2021)).setRevisions(("2006-11-22 00:00","2004-04-07 00:00","2002-09-05 00:00","2001-01-17 00:00","1999-12-09 00:00",))
prTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 2))
prEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 2, 1)).setIndexNames((0, "UCD-SNMP-MIB", "prIndex"))
prIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
prNames = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
prMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 3), Integer32()).setMaxAccess("readonly")
prMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 4), Integer32()).setMaxAccess("readonly")
prCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 5), Integer32()).setMaxAccess("readonly")
prErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 100), UCDErrorFlag()).setMaxAccess("readonly")
prErrMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 101), DisplayString()).setMaxAccess("readonly")
prErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 102), UCDErrorFix()).setMaxAccess("readwrite")
prErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 103), DisplayString()).setMaxAccess("readonly")
memory = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 4))
memIndex = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 1), Integer32()).setMaxAccess("readonly")
memErrorName = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 2), DisplayString()).setMaxAccess("readonly")
memTotalSwap = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 3), Integer32()).setMaxAccess("readonly").setUnits("kB")
memAvailSwap = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 4), Integer32()).setMaxAccess("readonly").setUnits("kB")
memTotalReal = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 5), Integer32()).setMaxAccess("readonly").setUnits("kB")
memAvailReal = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 6), Integer32()).setMaxAccess("readonly").setUnits("kB")
memTotalSwapTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 7), Integer32()).setMaxAccess("readonly").setUnits("kB")
memAvailSwapTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 8), Integer32()).setMaxAccess("readonly").setUnits("kB")
memTotalRealTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 9), Integer32()).setMaxAccess("readonly").setUnits("kB")
memAvailRealTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 10), Integer32()).setMaxAccess("readonly").setUnits("kB")
memTotalFree = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 11), Integer32()).setMaxAccess("readonly").setUnits("kB")
memMinimumSwap = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 12), Integer32()).setMaxAccess("readonly").setUnits("kB")
memShared = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 13), Integer32()).setMaxAccess("readonly").setUnits("kB")
memBuffer = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 14), Integer32()).setMaxAccess("readonly").setUnits("kB")
memCached = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 15), Integer32()).setMaxAccess("readonly").setUnits("kB")
memUsedSwapTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 16), Integer32()).setMaxAccess("readonly").setUnits("kB")
memUsedRealTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 17), Integer32()).setMaxAccess("readonly").setUnits("kB")
memSwapError = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 100), UCDErrorFlag()).setMaxAccess("readonly")
memSwapErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 101), DisplayString()).setMaxAccess("readonly")
extTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 8))
extEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 8, 1)).setIndexNames((0, "UCD-SNMP-MIB", "extIndex"))
extIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
extNames = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
extCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
extResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 100), Integer32()).setMaxAccess("readonly")
extOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 101), DisplayString()).setMaxAccess("readonly")
extErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 102), UCDErrorFix()).setMaxAccess("readwrite")
extErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 103), DisplayString()).setMaxAccess("readonly")
dskTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 9))
dskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 9, 1)).setIndexNames((0, "UCD-SNMP-MIB", "dskIndex"))
dskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
dskPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
dskDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
dskMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 4), Integer32()).setMaxAccess("readonly")
dskMinPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 5), Integer32()).setMaxAccess("readonly")
dskTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 6), Integer32()).setMaxAccess("readonly")
dskAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 7), Integer32()).setMaxAccess("readonly")
dskUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 8), Integer32()).setMaxAccess("readonly")
dskPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 9), Integer32()).setMaxAccess("readonly")
dskPercentNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 10), Integer32()).setMaxAccess("readonly")
dskErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 100), UCDErrorFlag()).setMaxAccess("readonly")
dskErrorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 101), DisplayString()).setMaxAccess("readonly")
laTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 10))
laEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 10, 1)).setIndexNames((0, "UCD-SNMP-MIB", "laIndex"))
laIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
laNames = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
laLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
laConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
laLoadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 5), Integer32()).setMaxAccess("readonly")
laLoadFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 6), Float()).setMaxAccess("readonly")
laErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 100), UCDErrorFlag()).setMaxAccess("readonly")
laErrMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 101), DisplayString()).setMaxAccess("readonly")
systemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 11))
ssIndex = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 1), Integer32()).setMaxAccess("readonly")
ssErrorName = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 2), DisplayString()).setMaxAccess("readonly")
ssSwapIn = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 3), Integer32()).setMaxAccess("readonly").setUnits("kB")
ssSwapOut = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 4), Integer32()).setMaxAccess("readonly").setUnits("kB")
ssIOSent = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 5), Integer32()).setMaxAccess("readonly").setUnits("blocks/s")
ssIOReceive = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 6), Integer32()).setMaxAccess("readonly").setUnits("blocks/s")
ssSysInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 7), Integer32()).setMaxAccess("readonly").setUnits("interrupts/s")
ssSysContext = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 8), Integer32()).setMaxAccess("readonly").setUnits("switches/s")
ssCpuUser = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 9), Integer32()).setMaxAccess("readonly")
ssCpuSystem = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 10), Integer32()).setMaxAccess("readonly")
ssCpuIdle = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 11), Integer32()).setMaxAccess("readonly")
ssCpuRawUser = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 50), Counter32()).setMaxAccess("readonly")
ssCpuRawNice = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 51), Counter32()).setMaxAccess("readonly")
ssCpuRawSystem = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 52), Counter32()).setMaxAccess("readonly")
ssCpuRawIdle = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 53), Counter32()).setMaxAccess("readonly")
ssCpuRawWait = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 54), Counter32()).setMaxAccess("readonly")
ssCpuRawKernel = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 55), Counter32()).setMaxAccess("readonly")
ssCpuRawInterrupt = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 56), Counter32()).setMaxAccess("readonly")
ssIORawSent = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 57), Counter32()).setMaxAccess("readonly")
ssIORawReceived = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 58), Counter32()).setMaxAccess("readonly")
ssRawInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 59), Counter32()).setMaxAccess("readonly")
ssRawContexts = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 60), Counter32()).setMaxAccess("readonly")
ssCpuRawSoftIRQ = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 61), Counter32()).setMaxAccess("readonly")
ssRawSwapIn = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 62), Counter32()).setMaxAccess("readonly")
ssRawSwapOut = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 63), Counter32()).setMaxAccess("readonly")
ucdInternal = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 12))
ucdExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 13))
fileTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 15))
fileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 15, 1)).setIndexNames((0, "UCD-SNMP-MIB", "fileIndex"))
fileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
fileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
fileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 3), Integer32()).setMaxAccess("readonly")
fileMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 4), Integer32()).setMaxAccess("readonly")
fileErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 100), UCDErrorFlag()).setMaxAccess("readonly")
fileErrorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 101), DisplayString()).setMaxAccess("readonly")
logMatch = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 16))
logMatchMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 2021, 16, 1), Integer32()).setMaxAccess("readonly")
logMatchTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 16, 2))
logMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1)).setIndexNames((0, "UCD-SNMP-MIB", "logMatchIndex"))
logMatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("readonly")
logMatchName = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
logMatchFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
logMatchRegEx = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
logMatchGlobalCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 5), Counter32()).setMaxAccess("readonly")
logMatchGlobalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 6), Integer32()).setMaxAccess("readonly")
logMatchCurrentCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 7), Counter32()).setMaxAccess("readonly")
logMatchCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 8), Integer32()).setMaxAccess("readonly")
logMatchCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 9), Counter32()).setMaxAccess("readonly")
logMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 10), Integer32()).setMaxAccess("readonly")
logMatchCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 11), Integer32()).setMaxAccess("readonly")
logMatchErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 100), UCDErrorFlag()).setMaxAccess("readonly")
logMatchRegExCompilation = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 101), DisplayString()).setMaxAccess("readonly")
version = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 100))
versionIndex = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 1), Integer32()).setMaxAccess("readonly")
versionTag = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 2), DisplayString()).setMaxAccess("readonly")
versionDate = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 3), DisplayString()).setMaxAccess("readonly")
versionCDate = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 4), DisplayString()).setMaxAccess("readonly")
versionIdent = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 5), DisplayString()).setMaxAccess("readonly")
versionConfigureOptions = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 6), DisplayString()).setMaxAccess("readonly")
versionClearCache = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 10), Integer32()).setMaxAccess("readwrite")
versionUpdateConfig = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 11), Integer32()).setMaxAccess("readwrite")
versionRestartAgent = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 12), Integer32()).setMaxAccess("readwrite")
versionSavePersistentData = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 13), Integer32()).setMaxAccess("readwrite")
versionDoDebugging = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 20), Integer32()).setMaxAccess("readwrite")
snmperrs = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 101))
snmperrIndex = MibScalar((1, 3, 6, 1, 4, 1, 2021, 101, 1), Integer32()).setMaxAccess("readonly")
snmperrNames = MibScalar((1, 3, 6, 1, 4, 1, 2021, 101, 2), DisplayString()).setMaxAccess("readonly")
snmperrErrorFlag = MibScalar((1, 3, 6, 1, 4, 1, 2021, 101, 100), UCDErrorFlag()).setMaxAccess("readonly")
snmperrErrMessage = MibScalar((1, 3, 6, 1, 4, 1, 2021, 101, 101), DisplayString()).setMaxAccess("readonly")
mrTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 102))
mrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 102, 1)).setIndexNames((0, "UCD-SNMP-MIB", "mrIndex"))
mrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 102, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
mrModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 102, 1, 2), DisplayString()).setMaxAccess("readonly")
ucdSnmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250))
hpux9 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 1))
sunos4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 2))
solaris = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 3))
osf = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 4))
ultrix = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 5))
hpux10 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 6))
netbsd1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 7))
freebsd = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 8))
irix = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 9))
linux = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 10))
bsdi = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 11))
openbsd = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 12))
win32 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 13))
hpux11 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 14))
unknown = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 255))
ucdTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 251))

# Augmentions

# Notifications

ucdStart = NotificationType((1, 3, 6, 1, 4, 1, 2021, 251, 1)).setObjects()
ucdShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2021, 251, 2)).setObjects()

# Exports

# Module identity
mibBuilder.exportSymbols("UCD-SNMP-MIB", PYSNMP_MODULE_ID=ucdavis)

# Types
mibBuilder.exportSymbols("UCD-SNMP-MIB", Float=Float, UCDErrorFix=UCDErrorFix, UCDErrorFlag=UCDErrorFlag)

# Objects
mibBuilder.exportSymbols("UCD-SNMP-MIB", ucdavis=ucdavis, prTable=prTable, prEntry=prEntry, prIndex=prIndex, prNames=prNames, prMin=prMin, prMax=prMax, prCount=prCount, prErrorFlag=prErrorFlag, prErrMessage=prErrMessage, prErrFix=prErrFix, prErrFixCmd=prErrFixCmd, memory=memory, memIndex=memIndex, memErrorName=memErrorName, memTotalSwap=memTotalSwap, memAvailSwap=memAvailSwap, memTotalReal=memTotalReal, memAvailReal=memAvailReal, memTotalSwapTXT=memTotalSwapTXT, memAvailSwapTXT=memAvailSwapTXT, memTotalRealTXT=memTotalRealTXT, memAvailRealTXT=memAvailRealTXT, memTotalFree=memTotalFree, memMinimumSwap=memMinimumSwap, memShared=memShared, memBuffer=memBuffer, memCached=memCached, memUsedSwapTXT=memUsedSwapTXT, memUsedRealTXT=memUsedRealTXT, memSwapError=memSwapError, memSwapErrorMsg=memSwapErrorMsg, extTable=extTable, extEntry=extEntry, extIndex=extIndex, extNames=extNames, extCommand=extCommand, extResult=extResult, extOutput=extOutput, extErrFix=extErrFix, extErrFixCmd=extErrFixCmd, dskTable=dskTable, dskEntry=dskEntry, dskIndex=dskIndex, dskPath=dskPath, dskDevice=dskDevice, dskMinimum=dskMinimum, dskMinPercent=dskMinPercent, dskTotal=dskTotal, dskAvail=dskAvail, dskUsed=dskUsed, dskPercent=dskPercent, dskPercentNode=dskPercentNode, dskErrorFlag=dskErrorFlag, dskErrorMsg=dskErrorMsg, laTable=laTable, laEntry=laEntry, laIndex=laIndex, laNames=laNames, laLoad=laLoad, laConfig=laConfig, laLoadInt=laLoadInt, laLoadFloat=laLoadFloat, laErrorFlag=laErrorFlag, laErrMessage=laErrMessage, systemStats=systemStats, ssIndex=ssIndex, ssErrorName=ssErrorName, ssSwapIn=ssSwapIn, ssSwapOut=ssSwapOut, ssIOSent=ssIOSent, ssIOReceive=ssIOReceive, ssSysInterrupts=ssSysInterrupts, ssSysContext=ssSysContext, ssCpuUser=ssCpuUser, ssCpuSystem=ssCpuSystem, ssCpuIdle=ssCpuIdle, ssCpuRawUser=ssCpuRawUser, ssCpuRawNice=ssCpuRawNice, ssCpuRawSystem=ssCpuRawSystem, ssCpuRawIdle=ssCpuRawIdle, ssCpuRawWait=ssCpuRawWait, ssCpuRawKernel=ssCpuRawKernel, ssCpuRawInterrupt=ssCpuRawInterrupt, ssIORawSent=ssIORawSent, ssIORawReceived=ssIORawReceived, ssRawInterrupts=ssRawInterrupts, ssRawContexts=ssRawContexts, ssCpuRawSoftIRQ=ssCpuRawSoftIRQ, ssRawSwapIn=ssRawSwapIn, ssRawSwapOut=ssRawSwapOut, ucdInternal=ucdInternal, ucdExperimental=ucdExperimental, fileTable=fileTable, fileEntry=fileEntry, fileIndex=fileIndex, fileName=fileName, fileSize=fileSize, fileMax=fileMax, fileErrorFlag=fileErrorFlag, fileErrorMsg=fileErrorMsg, logMatch=logMatch, logMatchMaxEntries=logMatchMaxEntries, logMatchTable=logMatchTable, logMatchEntry=logMatchEntry, logMatchIndex=logMatchIndex, logMatchName=logMatchName, logMatchFilename=logMatchFilename, logMatchRegEx=logMatchRegEx, logMatchGlobalCounter=logMatchGlobalCounter, logMatchGlobalCount=logMatchGlobalCount, logMatchCurrentCounter=logMatchCurrentCounter, logMatchCurrentCount=logMatchCurrentCount, logMatchCounter=logMatchCounter, logMatchCount=logMatchCount, logMatchCycle=logMatchCycle, logMatchErrorFlag=logMatchErrorFlag, logMatchRegExCompilation=logMatchRegExCompilation, version=version, versionIndex=versionIndex, versionTag=versionTag, versionDate=versionDate, versionCDate=versionCDate, versionIdent=versionIdent, versionConfigureOptions=versionConfigureOptions, versionClearCache=versionClearCache)
mibBuilder.exportSymbols("UCD-SNMP-MIB", versionUpdateConfig=versionUpdateConfig, versionRestartAgent=versionRestartAgent, versionSavePersistentData=versionSavePersistentData, versionDoDebugging=versionDoDebugging, snmperrs=snmperrs, snmperrIndex=snmperrIndex, snmperrNames=snmperrNames, snmperrErrorFlag=snmperrErrorFlag, snmperrErrMessage=snmperrErrMessage, mrTable=mrTable, mrEntry=mrEntry, mrIndex=mrIndex, mrModuleName=mrModuleName, ucdSnmpAgent=ucdSnmpAgent, hpux9=hpux9, sunos4=sunos4, solaris=solaris, osf=osf, ultrix=ultrix, hpux10=hpux10, netbsd1=netbsd1, freebsd=freebsd, irix=irix, linux=linux, bsdi=bsdi, openbsd=openbsd, win32=win32, hpux11=hpux11, unknown=unknown, ucdTraps=ucdTraps)

# Notifications
mibBuilder.exportSymbols("UCD-SNMP-MIB", ucdStart=ucdStart, ucdShutdown=ucdShutdown)

