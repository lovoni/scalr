# PySNMP SMI module. Autogenerated from smidump -f python HOST-RESOURCES-MIB
# by libsmi2pysnmp-0.0.7-alpha at Tue Jul 13 11:50:28 2010,
# Python version (2, 6, 5, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval
import os
# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( InterfaceIndexOrZero, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( MibScalarInstance, Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalarInstance", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "mib-2")
( AutonomousType, DateAndTime, DisplayString, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "DateAndTime", "DisplayString", "TextualConvention", "TruthValue")

# Types

class InternationalDisplayString(OctetString):
    pass

class KBytes(Integer32):
    subtypeSpec = Integer32.subtypeSpec+constraint.ValueRangeConstraint(0,2147483647L)
    pass
   
class NewMibTable(MibTable):
	
	def __init__(self, name):
		MibTable.__init__(self, name)
	
	def getNextNode(self, name, idx):
		mibBuilder.lastBuildId += 1
		mibBuilder.mibSymbols["__HOST-RESOURCES-MIB"] = hrSWRunvalues()
		return MibTable.getNextNode(self, name, idx)


# Objects

#host = MibIdentifier((1, 3, 6, 1, 2, 1, 25))
hrSWRunTable = NewMibTable((1, 3, 6, 1, 2, 1, 25, 4, 2))
hrSWRunEntry = MibTableRow((1, 3, 6, 1, 2, 1, 25, 4, 2, 1)).setIndexNames((0, "__HOST-RESOURCES-MIB", "hrSWRunIndex"))
hrSWRunIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 2147483647L))).setMaxAccess("readonly")
hrSWRunName = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 4, 2, 1, 2), InternationalDisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
hrSWRunPath = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 4, 2, 1, 4), InternationalDisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
hrSWRunParameters = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 4, 2, 1, 5), InternationalDisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
hrSWRunType = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 4, 2, 1, 6), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,2,)).subtype(namedValues=namedval.NamedValues(("unknown", 1), ("operatingSystem", 2), ("deviceDriver", 3), ("application", 4), ))).setMaxAccess("readonly")
hrSWRunStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 4, 2, 1, 7), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(("running", 1), ("runnable", 2), ("notRunnable", 3), ("invalid", 4), ))).setMaxAccess("readwrite")
hrSWRunPerf = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 5))
hrSWRunPerfTable = NewMibTable((1, 3, 6, 1, 2, 1, 25, 5, 1))
hrSWRunPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 25, 5, 1, 1))
hrSWRunPerfCPU = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-2, 2147483647L))).setMaxAccess("readonly")
hrSWRunPerfMem = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 5, 1, 1, 2), KBytes()).setMaxAccess("readonly")


# Augmentions
#hrSWRunEntry.registerAugmentions(("HOST-RESOURCES-MIB", "hrSWRunPerfEntry"))
#apply(hrSWRunPerfEntry.setIndexNames, hrSWRunEntry.getIndexNames())

# Exports


	

def hrSWRunvalues():
	devicelist = dict(hrSWRunTable = hrSWRunTable,
					  hrSWRunEntry = hrSWRunEntry, 
					  hrSWRunIndex = hrSWRunIndex,
					  hrSWRunName  = hrSWRunName,
					  hrSWRunPath  = hrSWRunPath,
					  hrSWRunParameters = hrSWRunParameters,
					  hrSWRunType = hrSWRunType,
					  hrSWRunStatus = hrSWRunStatus,
					  hrSWRunPerfTable = hrSWRunPerfTable,
					  hrSWRunPerfEntry = hrSWRunPerfEntry,
					  hrSWRunPerfCPU = hrSWRunPerfCPU,
					  hrSWRunPerfMem = hrSWRunPerfMem)
	proclist = []
	runtype_map = dict(R = 1, S = 2, T = 3, D = 3)
	for pid in os.listdir('/proc'):
		temp = {}
		if pid.isdigit():
			index = int(pid)
			temp['hrSWRunIndex'+pid] = MibScalarInstance(hrSWRunIndex.getName(), (index ,), hrSWRunIndex.getSyntax().clone(index))
			
			try:
				fp = open('/proc/'+pid+'/stat')
			except:
				continue
			status = fp.read().split()
			fp.close()			
			proc_name = status[1][1:-1]
			proc_state = status[2]
			proc_perfcpu = int(status[13]) + int(status[14])
			if proc_perfcpu > 2147483647:
				proc_perfcpu = -2
			try:
				fp = open('/proc/'+pid+'/status')
			except:
				continue
			status = fp.readlines()
			fp.close()			
			proc_perfmem = status[14].split()[1].strip()
			
			temp['hrSWRunName'+pid] = MibScalarInstance(hrSWRunName.getName(), (index ,), hrSWRunName.getSyntax().clone(proc_name))
			try:
				temp['hrSWRunStatus'+pid] = MibScalarInstance(hrSWRunStatus.getName(), (index ,), hrSWRunStatus.getSyntax().clone(runtype_map[proc_state]))
			except:
				temp['hrSWRunStatus'+pid] = MibScalarInstance(hrSWRunStatus.getName(), (index ,), hrSWRunStatus.getSyntax().clone(4))
			try:
				fp = open('/proc/'+pid+'/cmdline')
				cmdline = fp.readline()
				cmdline = cmdline.replace('\x00', ' ').split()
				fp.close()
			except:
				continue
			if len(cmdline):
				temp['hrSWRunPath'+pid] = MibScalarInstance(hrSWRunPath.getName(), (index ,), hrSWRunPath.getSyntax().clone(cmdline[0]))
				temp['hrSWRunParameters'+pid] = MibScalarInstance(hrSWRunParameters.getName(), (index ,), hrSWRunParameters.getSyntax().clone(' '.join(cmdline[1:])[:127]))
			else:
				temp['hrSWRunPath'+pid] = MibScalarInstance(hrSWRunPath.getName(), (index ,), hrSWRunPath.getSyntax().clone(''))
				temp['hrSWRunParameters'+pid] = MibScalarInstance(hrSWRunParameters.getName(), (index ,), hrSWRunParameters.getSyntax().clone(' '))
			temp['hrSWRunType'+pid] = MibScalarInstance(hrSWRunType.getName(), (index ,), hrSWRunType.getSyntax().clone(4))
			temp['hrSWRunPerfMem'+pid] = MibScalarInstance(hrSWRunPerfMem.getName(), (index ,), hrSWRunPerfMem.getSyntax().clone(int(proc_perfmem)))
			temp['hrSWRunPerfCPU'+pid] = MibScalarInstance(hrSWRunPerfCPU.getName(), (index ,), hrSWRunPerfCPU.getSyntax().clone(proc_perfcpu))
		if temp:
			devicelist.update(temp)
	return devicelist

mibBuilder.mibSymbols["__HOST-RESOURCES-MIB"] = hrSWRunvalues()